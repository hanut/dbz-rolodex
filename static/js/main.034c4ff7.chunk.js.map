{"version":3,"sources":["logo.svg","components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","person","className","pl","includes","src","avatar","alt","name","CardList","props","people","map","key","id","SearchBox","placeholder","onChange","type","App","toggle","mode","state","setState","handleSearch","e","searchText","currentTarget","value","goodGuys","badGuys","headers","fetch","then","res","json","catch","error","console","log","this","foundPeople","filter","p","toLowerCase","logo","style","height","margin","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,kC,oQCI9BC,G,kBAAO,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACI,yBACAC,UACI,mBACkB,cAAdD,EAAOE,IACVF,EAAOE,GAAGC,SAAS,OAClB,MAAQ,KAEV,yBAAKC,IAAK,+CAAiDJ,EAAOK,OAAQC,IAAKN,EAAOO,OACtF,4BAAKP,EAAOO,MACZ,2BAAIP,EAAOE,OCTVM,EAAW,SAACC,GACrB,OACI,yBAAKR,UAAU,aACVQ,EAAMC,OAAOC,KAAI,SAAAX,GAChB,OACE,kBAAC,EAAD,CAAMY,IAAKZ,EAAOa,GAAIb,OAAQA,SCPjCc,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,SAAhB,OACrB,2BACIf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbC,SAAUA,MCwEHE,E,YAzEb,aAAe,IAAD,8BACZ,+CAyBFC,OAAS,WAAO,IACRC,EAAS,EAAKC,MAAdD,KAEJA,EADW,cAATA,EACK,WAEA,YAET,EAAKE,SAAS,CAAEF,UAjCJ,EAoCdG,aAAe,SAACC,GACd,EAAKF,SAAS,CAAEG,WAAYD,EAAEE,cAAcC,SAnC5C,EAAKN,MAAQ,CACXD,KAAM,YACNQ,SAAU,GACVC,QAAS,GACTJ,WAAY,IANF,E,iFAUO,IAAD,OACdK,EAAU,CACZ,aAAc,gEAEhBC,MAAM,oDAAqD,CAAED,YAC1DE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAJ,GAAQ,OAAI,EAAKN,SAAS,CAAEM,gBACzDO,OAAM,SAAAC,GACLC,QAAQC,IAAIF,MAEhBL,MAAM,oDAAqD,CAAED,YAC1DE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAH,GAAO,OAAI,EAAKP,SAAS,CAAEO,eACxDM,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAkBR,IAAD,EACyCG,KAAKlB,MAA7CO,EADD,EACCA,SAAUC,EADX,EACWA,QAASJ,EADpB,EACoBA,WACrBe,EAAwB,cAFvB,EACgCpB,KACMQ,EAASa,QAAO,SAAAC,GAAC,OAC5DA,EAAEnC,KAAKoC,cAAcxC,SAASsB,EAAWkB,kBACvCd,EAAQY,QAAO,SAAAC,GAAC,OAAIA,EAAEnC,KAAKoC,cAAcxC,SAASsB,EAAWkB,kBACjE,OACE,yBAAK1C,UAAU,OACb,yBAAKA,UAAU,iBACb,yBAAKG,IAAKwC,IAAMC,MAAO,CAAEC,OAAQ,QAASC,OAAQ,aAAezC,IAAI,SAEvE,kDACA,kBAAC,EAAD,CACES,YAAW,uBAAsC,cAApBwB,KAAKlB,MAAMD,KAAuB,OAAS,UAA7D,OACXJ,SAAUuB,KAAKhB,eAEjB,6BACA,4BAAQyB,QAAST,KAAKpB,QAAtB,eACqB,cAApBoB,KAAKlB,MAAMD,KACV,iCACE,yCACA,kBAAC,EAAD,CAAUV,OAAQ8B,KAGpB,iCACE,wCACA,kBAAC,EAAD,CAAU9B,OAAQ8B,U,GAnEZS,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM6B,c","file":"static/js/main.034c4ff7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cb236619.svg\";","import React from 'react';\n\nimport './card.css';\n\nexport const Card = ({ person }) => {\n    return (\n        <div \n        className={\n            \"card-container \" \n            + ((person.pl === 'God Level') ||\n            (person.pl.includes(\"???\"))  \n            ? \"god\" : \"\")\n            }>\n            <img src={'https://hanut.github.io/dbz-rolodex/avatars/' + person.avatar} alt={person.name} />\n            <h3>{person.name}</h3>\n            <p>{person.pl}</p>\n        </div>\n    )\n}","import React from 'react';\n\nimport './card-list.css';\nimport { Card } from '../card/card';\n\n\nexport const CardList = (props) => {\n    return (\n        <div className=\"card-list\">\n            {props.people.map(person => {\n              return (\n                <Card key={person.id} person={person}/>\n              )\n            })}\n        </div>\n    )\n}","import React from 'react';\n\nimport './search-box.css';\n\nexport const SearchBox = ({ placeholder, onChange }) => (\n    <input\n        className=\"search\"\n        type=\"search\" \n        placeholder={placeholder} \n        onChange={onChange}/>\n) ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list';\nimport { SearchBox } from './components/search-box/search-box';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      mode: 'good-guys',\n      goodGuys: [],\n      badGuys: [],\n      searchText: ''\n    }\n  }\n\n  componentDidMount() {\n    let headers = {\n      \"secret-key\": \"$2b$10$da8v3mD22/yGiVZ7mMQ.muhu2aCXvZBeswrzZH818ppDSQFBMCXmm\"\n    };\n    fetch(\"https://api.jsonbin.io/b/5e54f5fab383ea294aef3e65\", { headers })\n      .then(res => res.json()).then(goodGuys => this.setState({ goodGuys }))\n      .catch(error => {\n        console.log(error);\n      });\n    fetch(\"https://api.jsonbin.io/b/5e54f6c80a22af292e0e9bac\", { headers })\n      .then(res => res.json()).then(badGuys => this.setState({ badGuys }))\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  toggle = () => {\n    let { mode } = this.state;\n    if (mode === 'good-guys') {\n      mode = 'bad-guys'\n    } else {\n      mode = 'good-guys'\n    }\n    this.setState({ mode });\n  }\n\n  handleSearch = (e) => {\n    this.setState({ searchText: e.currentTarget.value })\n  }\n\n  render() {\n    const { goodGuys, badGuys, searchText, mode } = this.state;\n    const foundPeople = (mode === 'good-guys') ? goodGuys.filter(p =>\n      p.name.toLowerCase().includes(searchText.toLowerCase())\n    ) : badGuys.filter(p => p.name.toLowerCase().includes(searchText.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <div className=\"topLogoHolder\">\n          <img src={logo} style={{ height: \"120px\", margin: \"1rem auto\" }} alt=\"DBZ\" />\n        </div>\n        <h1>Dragonball Rolodex</h1>\n        <SearchBox\n          placeholder={`search for a ${this.state.mode === 'good-guys' ? 'hero' : 'villain'}...`}\n          onChange={this.handleSearch}\n        />\n        <br />\n        <button onClick={this.toggle}>Toggle Mode</button>\n        {this.state.mode === 'good-guys' ?\n          <section >\n            <h2>Good Guys</h2>\n            <CardList people={foundPeople} />\n          </section>\n          :\n          <section>\n            <h2>Bad Guys</h2>\n            <CardList people={foundPeople} />\n          </section>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}